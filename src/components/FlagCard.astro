---
import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<'div'> {
  heading: string;
  horizProperty: string;
  vertProperty: string;
  diagProperty: string | null;
  horizClass: string | null;
  horiz53Class: string;
  vertClass: string | null;
  vert35Class: string;
  diagClass: string | null;
}

const {
  heading,
  horizProperty,
  vertProperty,
  diagProperty,
  horizClass,
  horiz53Class,
  vertClass,
  vert35Class,
  diagClass,
  ...attrs
} = Astro.props;
---

<div class="flag-card" {...attrs}>
  <div class="flag-card__flag" style={{ background: `var(${horizProperty})` }}>
  </div>
  <div class="flag-card__text">
    <h3 class="flag-card__heading">{heading}</h3>
    <p><b>CSS Properties</b></p>
    <p>Horizontal: <code>{horizProperty}</code></p>
    <p>Vertical: <code>{vertProperty}</code></p>
    {
      diagProperty && (
        <p>
          Diagonal: <code>{diagProperty}</code>
        </p>
      )
    }
    <p><b>CSS Classes</b></p>
    {
      horizClass && (
        <p>
          Horizontal: <code>{horizClass}</code>
        </p>
      )
    }
    <p>Horizontal, 5:3: <code>{horiz53Class}</code></p>
    {
      vertClass && (
        <p>
          Vertical: <code>{vertClass}</code>
        </p>
      )
    }
    <p>Vertical, 3:5: <code>{vert35Class}</code></p>
    {
      diagClass && (
        <p>
          Diagonal: <code>{diagClass}</code>
        </p>
      )
    }
  </div>
</div>

<style>
  .flag-card {
    border-radius: var(--radius-m);
    box-shadow: var(--shadow);
    background-color: var(--color-container);
  }

  .flag-card__flag {
    width: 100%;
    aspect-ratio: 5 / 3;
    border-top-left-radius: inherit;
    border-top-right-radius: inherit;
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
  }

  .flag-card__text {
    padding: var(--spacing-4);

    & :first-child {
      margin-block-start: 0;
    }

    & :last-child {
      margin-block-end: 0;
    }
  }
</style>
